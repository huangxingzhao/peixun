课程主题
	动态代理设计模式和AOP相关类的解读
	
课程内容
	AOP的理解
		OOP：面向对象编程
		AOP：面向切面编程
		
		OOP和AOP都是编程思想。
		AOP是OOP的扩展和延续。
		
		AOP可以对OOP实践不足的地方进行扩展。
		
		AOP核心作用：在不修改目标类的前提下，对目标类的目标方法进行功能增强。
		
		AOP只是一种思想，对于它的实现有多种，其中最有名的就是AspectJ、Spring aop。
		
		其中spring 对于AspectJ也是整合到自己的框架中了，所以我们其实经常使用的方式是：
		Spring 整合AspectJ的实现方式。
		
		
		
		
		UserService{		
			save(){
			
				//开启事务		-----	系统逻辑
				
				//完成业务操作	----- 	业务逻辑
				
				//结束事务		-----	系统逻辑			
			}
		}
		
		OrderService{
		
			save(){
			
				//开启事务
				
				//完成业务操作
				
				//结束事务
			
			}
		}
		
		
		
		
		UserService{		
			save(){				
				//完成业务操作	----- 	业务逻辑					
			}
		}
		
		OrderService{		
			save(){				
				//完成业务操作	----- 	业务逻辑			
			}
		}
		
		
	动态代理技术
		代理设计模式：
			静态代理：就是在写代码的时候，给目标类多写代理类。
			动态代理：主要是jdk的动态代理和cglib的动态代理
			
		jdk的动态代理和cglib的动态代理的区别：
			1.jdk动态代理是通过接口的方式来实现的代理
				目标对象和代理对象，都是原目标对象所实现接口的实现类。
				一个实现类是我们写的
				一个实现类是通过动态代理产生的。（功能更加强大，其中也包含我们手写的实现类的逻辑）
			2.cglib动态代理是通过继承的方式和字节码api去产生了代理
				目标对象是代理对象的父类。
				也就是通过继承的方式，去扩展目标对象的功能。
				cglib底层是通过asm去完成的代理对象的产生。
			