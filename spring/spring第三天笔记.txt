课程主题
	高级容器ApplicationContext源码阅读和循环依赖问题解决
	
课程内容
	高级容器ApplicationContext和基础容器BeanFactory的区别：
	1.BeanFactory是ApplicationContext顶级接口。
	2.BeanFactory创建bean实例的时机是第一次获取bean的时候去创建。
	3.ApplicationContext创建bean实例的时机是第一次容器初始化的时候，创建所有的单例bean实例

	高级容器ApplicationContext的初始化入口，以ClassPathXmlApplicationContext举例：
	
	ApplicationContext context = new ClassPathXmlApplicationContext("spring/spring-ioc.xml");
	
	
	循环依赖：
		A对象-->B对象 	B对象-->A对象
		
	
		循环依赖分为：构造循环依赖、set方法循环依赖
			构造循环依赖：无法解决，只能修改代码
			
			set方法循环依赖：可以解决，spring就是通过三级缓存来解决的循环依赖
			
		spring中bean实例的创建过程：
		1.实例化，也就是new对象
			通过三级缓存来解决循环依赖，就是在这个时间点
		2.属性填充
		3.初始化
		
		案例：
			
			A{
				B
			}
			
			B{
				A
			}
		
			1.A对象完成实例化
			2.进行属性填充
				设置B对象属性，想要获取B对象
					1.B对象完成实例化
					2.进行属性填充
						设置A对象属性，想要获取A对象，直接从三级缓存中获取A对象，然后放入二级缓存
					3.初始化
					4.B对象，从二级缓存中放入一级缓存
					
			3.初始化
			4.A对象，从二级缓存中，放入一级缓存
			
			
		
		三级缓存理解：
		
			一级缓存：singletonObjects（beanName，Object对象）
				什么时候添加？
					在单例bean完成三部曲之后，会添加到一级缓存中
					
				什么作用？
					我们去getBean的时候，想要的bean，就是放到该缓存中，不需要每次getBean都创建新的bean实例
			二级缓存：earlySingletonObjects（beanName，Object对象）
				什么作用？
					存储提早的暴露未完成初始化的bean实例的引用。
				
			三级缓存：singletonFactories（beanName，ObjectFactory对象）
				什么作用？
					就是通过ObjectFactory，提早的暴露未完成初始化的bean实例的引用。
					想要对提早暴露的bean完成一些BeanPostProcessor操作。
					
					ObjectFactory开始存储的bean（由第一步产生的bean），可能是最终的bean，也可能不是最终的bean。
					我们最终想要的bean，想要调用ObjectFactory的getObject方法去获取，获取到的这个bean，也是未完成初始化的bean
					想要放入提早暴露bean引用的二级缓存中。
				
				什么时候添加到三级缓存中？
					完成三部曲第一个步骤，也就是创建bean实例之后。
					
				什么时候从三级缓存中删除呢？
					第一次，从一级缓存找对象，没有，接下来从二级缓存找，没有，接下来从三级缓存中找到。
					然后放入二级缓存，删除三级缓存。
					
					
			
			
			A{
				B
				C
			}
			
			B{
				C
			}
			
			C{
				A
			}
			
			以上这个例子：C对象，需要调用getBean两次
			
			那么第一次，先从三级缓存获取到提早暴露的bean，然后将bean放入二级缓存
			
			第二次，调用getBean方法去C对象的时候，就会直接从二级缓存中，获取到C对象（依然是未完成三部曲的bean实例）
			
			
			